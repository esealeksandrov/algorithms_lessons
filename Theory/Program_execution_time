MergSort - Соритровка слиянием. достаточно сложный алгоритм для начала анализа,
поэтому нужно сначала разобраться с более простой задачей.

MERGE:
    Вход: отсортированные массивы C и D (длиной n/2 каждый).
    Выход: отсортированный массив B (длиной n).
    Упрощающее допущение: n — четное.
    1 i := 1
    2 j := 1
    3 for k := 1 to n do
    4   if C[i] < D[j] then
    5       B[k] := C[i] // заполнить выходной массив
    6       i := i + 1 // прирастить i
    7   else // D[j] < C[i]
    8       B[k] := D[j]
    9       j := j + 1

0) При слиянии происходит сканирование массивов С и D в которых лежат по n/2 элементов.
1) При каждой итерации происходит сравнение одного элемента из С и D.
2) Когда какой-то элемент меньше или равен своего соперника,
3) он добавляется в результирующий массив B
4) индексная закладка для этого элемента увеличивается на единицу


l = n = длинна массива.
Сложностьданного алгоритма можно посчитать посчитав количество исполняемых операций.
первые две строки - иницализация выполняются за константное время. Поэтому их можно
представить как 2
Далее 4 действия будет выполняться в цикле. Количество проходов будет соответствовать
длинне массива, а именно 4*n
В результате получается, что количество операций при слиянии будет 4n + 2 Получается ,
что количество операций можно выявить неравенством l >= 1, 4l+2 <= 6l . Таким образом
получается, что количество операций не будет привышать 6l.

______________________________________________________________________________________
Лемма 1.1 (Время исполнения подпрограммы Merge):
Для каждой пары отсортированных входных массивов C и D длинной l/2 подпрограмма Megre
выполняется не более 6l операций.
______________________________________________________________________________________


Далее, исходя из вышепредставленной леммы, можно определить следующую теорему для
рассчета максимума количества операций для программы MergeSort учитывая все операции
в рекурсивных вызовах.


______________________________________________________________________________________
Теорема 1.2 (предел времени выполнения алгоритма MergeSort).
Для каждого входного массива длинной n >= 1 алгоритм MergeSort выполняет не более
6n * log2(n) + 6n операций. где log2 - логорифм по основанию 2.
______________________________________________________________________________________
Так как задача рекурсивная и на каждом этапе исходный массив разбивается на 2 части,
То количество исполняемых подзадач на каждом уровне рекурсииможно можно будет определить
как 2^j, где j - количество. А саму структуру рекурсивных вызовов как двоичное дерево.
В таком случае Работа на одну подзадачу на уровне j будет ровнятся 6n/2^j.
Получается, что на уровне j объем операций будет ровнятся 2^j*6n/2^j = 6n.
В таком случае выходит, что количество операций на каждом уровне рекурсии не зависит от j и
всегда будет равным 6n.





